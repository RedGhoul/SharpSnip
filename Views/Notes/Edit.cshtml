@model NoteEditViewModel

@{
    ViewData["Title"] = "Edit";
}
<style>
    .control-label {
        font-size: xx-large;
    }

    #codeEditor {
        height: 500px;
        width: 100%;
    }
</style>
<h4>Note - Edit</h4>
<hr />
<div>
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <form>
            <input type="hidden" asp-for="@Model.Note.Id" />
            <div class="form-group">
                @if (string.IsNullOrWhiteSpace(@Model.Note.Content))
                {
                    <a id="ViewNote" class="btn btn-primary">Add Note Snip</a>
                }


                @if (string.IsNullOrWhiteSpace(@Model.Note.CodeContent))
                {
                    <a id="ViewCode" class="btn btn-primary">Add Code Snip</a>
                }


            </div>
            <div class="form-group">
                <label asp-for="@Model.Note.Name" class="control-label"></label>
                <input asp-for="@Model.Note.Name" class="form-control" />
            </div>
            <div class="form-group" id="note-content">
                <label asp-for="@Model.Note.Content" class="control-label"></label>
                <input asp-for="@Model.Note.Content" class="form-control" hidden />
                <div id="editorContent" style="height: 300px;">
                    @Html.Raw(@Model.Note.Content)
                </div>
            </div>
            <div class="form-group" id="code-picker">
                @if (Model.Note.CodingLanguage == null)
                {
                    <a id="lang_id" hidden></a>
                }
                else
                {
                    <a id="lang_id" hidden>@Model.Note.CodingLanguage.Name</a>
                }

                <label class="control-label">Coding Language</label>
                <select class="selectpicker form-control" asp-for="@Model.Note.CodingLanguageId" asp-items="@Model.CodingLanguages">
                    <option>Please select one</option>
                </select>
            </div>

            <div class="form-group" id="code-content">
                <label for="text">Code</label>
                <div id="codeEditor"></div>
                <textarea class="form-control"
                          type="text"
                          asp-for="@Model.Note.CodeContent">
                @Html.Raw(Model.Note.CodeContent)
                </textarea>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.7/ace.js"
            integrity="sha256-C7DTYRJLG+B/VEzHGeoPMw699nsTQYPAXHKXZb+q04E="
            crossorigin="anonymous"></script>
    <script>
      
        window.addEventListener('load', (event) => {
            

            var codepicker = $("#code-picker");
            var codeContent = $("#code-content");
            var noteContent = $("#note-content")

            @if (string.IsNullOrWhiteSpace(@Model.Note.Content)) {
                @Html.Raw("noteContent.hide();")
            }

            @if (string.IsNullOrWhiteSpace(@Model.Note.CodeContent)) {
                @Html.Raw("codepicker.hide();")
                @Html.Raw("codeContent.hide();")
            }

            $("#ViewCode").click(function () {
                codepicker.show();
                codeContent.show();
                $("#ViewCode").hide();
            });

            $("#ViewNote").click(function () {
                noteContent.show();
                $("#ViewNote").hide();
            });

            var curTimeOutNoteName = null;
            $("#Note_Name").keyup(function () {
                if (curTimeOutNoteName !== null) {
                    clearTimeout(curTimeOutNoteName);
                }
                curTimeOutNoteName = setTimeout(function () {
                    $.ajax({
                        url: "/api/Notes/NoteName/" + curNoteId,
                        dataType: 'text',
                        type: 'post',
                        contentType: 'application/json',
                        data: JSON.stringify({ "noteName": $("#Note_Name").val() }),
                        success: function (data, textStatus, jQxhr) {
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            alertify.message("Could not save change", 1000);
                        }
                    });
                }, 500);
            })


            var toolbarOptions = [
                ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
                ['blockquote', 'code-block'],
                [{ 'header': 1 }, { 'header': 2 }],               // custom button values
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
                [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
                [{ 'direction': 'rtl' }],                         // text direction
                [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                [{ 'font': [] }],
                [{ 'align': [] }],
                ['clean']                                         // remove formatting button
            ];

            var quillDocs = new Quill('#editorContent', {
                theme: 'snow',
                modules: {
                    toolbar: toolbarOptions
                },
            });

            var curNoteId = $("#Note_Id").val();

            var curTimeOutNoteContent = null;
            quillDocs.on('text-change', function (delta) {
                $("#Note_Content").val(quillDocs.root.innerHTML);
                if (curTimeOutNoteContent !== null) {
                    clearTimeout(curTimeOutNoteContent);
                }
                curTimeOutNoteContent = setTimeout(function () {
                    $.ajax({
                        url: "/api/Notes/NoteContent/" + curNoteId,
                        dataType: 'text',
                        type: 'post',
                        contentType: 'application/json',
                        data: JSON.stringify({ "noteContent": $("#Note_Content").val() }),
                        success: function (data, textStatus, jQxhr) {
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            alertify.message("Could not save change", 1000);
                        }
                    });
                }, 500);
            });

            var codeContentText = $("#Note_CodeContent");
            codeContentText.hide();

            var aceEditor = ace.edit("codeEditor");

            aceEditor.setTheme("ace/theme/dracula");

            aceEditor.setOptions({
                fontSize: "16px"
            });

            aceEditor.getSession().setValue(codeContentText.val());

            var curTimeOutCodeContent = null;
            aceEditor.getSession().on("change", function () {
                codeContentText.val(aceEditor.getSession().getValue());
                if (curTimeOutCodeContent !== null) {
                    clearTimeout(curTimeOutCodeContent);
                }
                curTimeOutCodeContent = setTimeout(function () {
                    $.ajax({
                        url: "/api/Notes/CodeContent/" + curNoteId,
                        dataType: 'text',
                        type: 'post',
                        contentType: 'application/json',
                        data: JSON.stringify({ "codeContent": codeContentText.val() }),
                        success: function (data, textStatus, jQxhr) {
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            alertify.message("Could not save change", 1000);
                        }
                    });
                }, 500);
                
            });

            aceEditor.clearSelection();

            var langDropDown = $("#Note_CodingLanguageId");
            setCodeEditorSyntax($("#Note_CodingLanguageId :selected").text())
            langDropDown.change(function () {
                setCodeEditorSyntax($("#Note_CodingLanguageId :selected").text());
                setTimeout(function () {
                    $.ajax({
                        url: "/api/Notes/CodeLang/" + curNoteId + "/" + $("#Note_CodingLanguageId :selected").val(),
                        dataType: 'text',
                        type: 'post',
                        contentType: 'application/json',
                        success: function (data, textStatus, jQxhr) {
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            alertify.message("Could not save change", 1000);
                        }
                    });
                }, 500);
            });

            function setCodeEditorSyntax(modeValue) {
                switch (modeValue) {
                    case "markdown":
                        aceEditor.session.setMode("ace/mode/markdown");
                        break;
                    case "c":
                        aceEditor.session.setMode("ace/mode/c_cpp");
                        break;
                    case "python3":
                        aceEditor.session.setMode("ace/mode/python");
                        break;
                    case "sql":
                        aceEditor.session.setMode("ace/mode/sql");
                        break;
                    case "java":
                        aceEditor.session.setMode("ace/mode/java");
                        break;
                    case "html":
                        aceEditor.session.setMode("ace/mode/html");
                        break;
                    case "csharp":
                        aceEditor.session.setMode("ace/mode/csharp");
                        break;
                    default:
                        aceEditor.session.setMode("ace/mode/sql");
                        break;
                }
            }
           
        });
    </script>
}
